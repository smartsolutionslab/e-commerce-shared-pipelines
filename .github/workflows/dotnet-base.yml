name: Reusable .NET Base Pipeline

on:
  workflow_call:
    inputs:
      dotnet-version:
        required: false
        type: string
        default: '9.0.x'
      run-tests:
        required: false
        type: boolean
        default: true
      run-security-scan:
        required: false
        type: boolean
        default: true
      build-configuration:
        required: false
        type: string
        default: 'Release'
      requires-github-packages:
        required: false
        type: boolean
        default: false
    outputs:
      version:
        description: "Semantic version"
        value: ${{ jobs.version.outputs.version }}
      is-release:
        description: "Is main branch release"
        value: ${{ jobs.version.outputs.is-release }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      nuget-version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      is-release: ${{ steps.gitversion.outputs.branchName == 'main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.1.0
      with:
        versionSpec: '6.3.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4.1.0

  setup-nuget:
    runs-on: ubuntu-latest
    if: ${{ inputs.requires-github-packages }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup authenticated nuget.config
      run: |
        # ...existing nuget.config setup...

    - name: Upload nuget.config artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}
        path: nuget.config
        retention-days: 1

  build-and-test:
    runs-on: ubuntu-latest
    needs: [version, setup-nuget]
    if: always() && (needs.setup-nuget.result == 'success' || needs.setup-nuget.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download nuget.config
      if: ${{ inputs.requires-github-packages }}
      uses: actions/download-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }} -p:Version=${{ needs.version.outputs.version }}

    - name: Run unit tests
      if: ${{ inputs.run-tests }}
      run: dotnet test --no-build --configuration ${{ inputs.build-configuration }} --verbosity normal --filter "Category!=Integration"

  security-scan:
    runs-on: ubuntu-latest
    if: ${{ inputs.run-security-scan }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
