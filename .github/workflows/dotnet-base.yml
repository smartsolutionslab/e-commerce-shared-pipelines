name: Reusable .NET Base Pipeline

on:
  workflow_call:
    inputs:
      dotnet-version:
        required: false
        type: string
        default: '9.0.x'
      run-tests:
        required: false
        type: boolean
        default: true
      run-security-scan:
        required: false
        type: boolean
        default: true
      build-configuration:
        required: false
        type: string
        default: 'Release'
      requires-github-packages:
        required: false
        type: boolean
        default: false
    outputs:
      version:
        description: "Semantic version"
        value: ${{ jobs.version.outputs.version }}
      nuget-version:
        description: "NuGet version"
        value: ${{ jobs.version.outputs.nuget-version }}
      is-release:
        description: "Is main branch release"
        value: ${{ jobs.version.outputs.is-release }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      nuget-version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      is-release: ${{ steps.gitversion.outputs.branchName == 'main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.1.0
      with:
        versionSpec: '6.x'

    - name: Create GitVersion config
      run: |
        cat > GitVersion.yml << EOF
        mode: ContinuousDelivery
        branches:
          main:
            regex: ^main$
            tag: ''
            increment: Minor
            prevent-increment-of-merged-branch-version: true
            is-release-branch: true
          develop:
            regex: ^develop$
            tag: alpha
            increment: Minor
            is-release-branch: false
          feature:
            regex: ^feature[/-]
            tag: beta
            increment: None
            is-release-branch: false
        EOF

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4.1.0
      with:
        useConfigFile: true

  setup-nuget:
    runs-on: ubuntu-latest
    if: ${{ inputs.requires-github-packages }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup authenticated nuget.config
      run: |
        if [ -f "nuget.config" ]; then
          sed -i "s/YOUR_USERNAME/${{ github.repository_owner }}/g" nuget.config
          sed -i "s/USERNAME_PLACEHOLDER/${{ github.actor }}/g" nuget.config
          sed -i "s/TOKEN_PLACEHOLDER/${{ secrets.GITHUB_TOKEN }}/g" nuget.config
        else
          cat > nuget.config << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <packageSources>
            <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
            <add key="github" value="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" />
          </packageSources>
          <packageSourceCredentials>
            <github>
              <add key="Username" value="${{ github.actor }}" />
              <add key="ClearTextPassword" value="${{ secrets.GITHUB_TOKEN }}" />
            </github>
          </packageSourceCredentials>
        </configuration>
        EOF
        fi

    - name: Upload nuget.config artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}
        path: nuget.config
        retention-days: 1

  build-and-test:
    runs-on: ubuntu-latest
    needs: [version, setup-nuget]
    if: always() && (needs.setup-nuget.result == 'success' || needs.setup-nuget.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download nuget.config
      if: ${{ inputs.requires-github-packages }}
      uses: actions/download-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }} -p:Version=${{ needs.version.outputs.version }}

    - name: Run unit tests
      if: ${{ inputs.run-tests }}
      run: dotnet test --no-build --configuration ${{ inputs.build-configuration }} --verbosity normal --filter "Category!=Integration"

  security-scan:
    runs-on: ubuntu-latest
    if: ${{ inputs.run-security-scan }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
