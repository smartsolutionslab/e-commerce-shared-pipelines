name: Reusable .NET Library Pipeline

on:
  workflow_call:
    inputs:
      library-name:
        required: true
        type: string
      dotnet-version:
        required: false
        type: string
        default: '9.0.x'
      run-tests:
        required: false
        type: boolean
        default: true
      run-security-scan:
        required: false
        type: boolean
        default: true
      build-configuration:
        required: false
        type: string
        default: 'Release'
      publish-nuget:
        required: false
        type: boolean
        default: true
      nuget-source:
        required: false
        type: string
        default: 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      nuget-version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      is-release: ${{ steps.gitversion.outputs.branchName == 'main' }}
      is-prerelease: ${{ steps.gitversion.outputs.branchName != 'main' }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.1.0
      with:
        versionSpec: '6.3.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4.1.0

  build-and-test:
    runs-on: ubuntu-latest
    needs: version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }} -p:Version=${{ needs.version.outputs.version }}

    - name: Run unit tests
      if: ${{ inputs.run-tests }}
      run: dotnet test --no-build --configuration ${{ inputs.build-configuration }} --verbosity normal

  security-scan:
    runs-on: ubuntu-latest
    if: ${{ inputs.run-security-scan }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  publish-nuget:
    runs-on: ubuntu-latest
    needs: [version, build-and-test, security-scan]
    if: ${{ inputs.publish-nuget && github.event_name == 'push' }}
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }} -p:Version=${{ needs.version.outputs.version }}

    - name: Pack NuGet packages
      run: dotnet pack --no-build --configuration ${{ inputs.build-configuration }} --output ./artifacts -p:PackageVersion=${{ needs.version.outputs.nuget-version }}

    - name: Publish Release to GitHub Packages
      if: ${{ needs.version.outputs.is-release == 'true' }}
      run: |
        for file in ./artifacts/*.nupkg; do
          dotnet nuget push "$file" --source ${{ inputs.nuget-source }} --api-key ${{ secrets.GITHUB_TOKEN }}
        done

    - name: Publish Prerelease to GitHub Packages
      if: ${{ needs.version.outputs.is-prerelease == 'true' }}
      run: |
        for file in ./artifacts/*.nupkg; do
          dotnet nuget push "$file" --source ${{ inputs.nuget-source }} --api-key ${{ secrets.GITHUB_TOKEN }}
        done

  create-release:
    runs-on: ubuntu-latest
    needs: [version, publish-nuget]
    if: ${{ needs.version.outputs.is-release == 'true' && github.event_name == 'push' }}
    
    permissions:
      contents: write

    steps:
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.version.outputs.version }}
        release_name: Release v${{ needs.version.outputs.version }}
        draft: false
        prerelease: false     
