name: Reusable .NET Library Pipeline

on:
  workflow_call:
    inputs:
      library-name:
        required: true
        type: string
      dotnet-version:
        required: false
        type: string
        default: '9.0.x'
      run-tests:
        required: false
        type: boolean
        default: true
      run-security-scan:
        required: false
        type: boolean
        default: true
      build-configuration:
        required: false
        type: string
        default: 'Release'
      publish-nuget:
        required: false
        type: boolean
        default: true
      nuget-source:
        required: false
        type: string
        default: 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'

jobs:
  base-pipeline:
    uses: ./.github/workflows/dotnet-base.yml
    with:
      dotnet-version: ${{ inputs.dotnet-version }}
      run-tests: ${{ inputs.run-tests }}
      run-security-scan: ${{ inputs.run-security-scan }}
      build-configuration: ${{ inputs.build-configuration }}
      requires-github-packages: false
    secrets: inherit

  publish-nuget:
    runs-on: ubuntu-latest
    needs: base-pipeline
    if: ${{ inputs.publish-nuget && github.event_name == 'push' }}
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }} -p:Version=${{ needs.version.outputs.version }}

    - name: Pack NuGet packages
      run: |
        VERSION="${{ needs.version.outputs.nuget-version }}"
        if [ -z "$VERSION" ]; then
          VERSION="${{ needs.version.outputs.version }}"
          echo "Using fallback version: $VERSION"
        else
          echo "Using NuGet version: $VERSION"
        fi
        dotnet pack --no-build --configuration ${{ inputs.build-configuration }} --output ./artifacts -p:PackageVersion="$VERSION"

    - name: Publish Release to GitHub Packages
      if: ${{ needs.version.outputs.is-release == 'true' }}
      run: |
        for file in ./artifacts/*.nupkg; do
          dotnet nuget push "$file" --source ${{ inputs.nuget-source }} --api-key ${{ secrets.GITHUB_TOKEN }}
        done

    - name: Publish Prerelease to GitHub Packages
      if: ${{ needs.version.outputs.is-prerelease == 'true' }}
      run: |
        for file in ./artifacts/*.nupkg; do
          dotnet nuget push "$file" --source ${{ inputs.nuget-source }} --api-key ${{ secrets.GITHUB_TOKEN }}
        done

  create-release:
    runs-on: ubuntu-latest
    needs: [base-pipeline, publish-nuget]
    if: ${{ needs.base-pipeline.outputs.is-release == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    
    permissions:
      contents: write

    steps:
    - name: Create GitHub Release and Tag
      run: |
        gh release create v${{ needs.base-pipeline.outputs.version }} \
          --title "Release v${{ needs.base-pipeline.outputs.version }}" \
          --notes "Auto-generated release for ${{ inputs.library-name }}" \
          --generate-notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        token: ${{ secrets.GITHUB_TOKEN }}
