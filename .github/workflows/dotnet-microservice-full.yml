name: Complete .NET Microservice Pipeline

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      dotnet-version:
        required: false
        type: string
        default: '9.0.x'
      run-tests:
        required: false
        type: boolean
        default: true
      run-integration-tests:
        required: false
        type: boolean
        default: true
      run-security-scan:
        required: false
        type: boolean
        default: true
      build-configuration:
        required: false
        type: string
        default: 'Release'
      database-type:
        required: false
        type: string
        default: 'mssql'
      requires-github-packages:
        required: false
        type: boolean
        default: false
      build-docker:
        required: false
        type: boolean
        default: true
      docker-registry:
        required: false
        type: string
        default: 'ghcr.io'
      deploy-to-dev:
        required: false
        type: boolean
        default: false
      deploy-to-prod:
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ${{ inputs.docker-registry }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      docker-tag: ${{ steps.gitversion.outputs.semVer }}
      is-release: ${{ steps.gitversion.outputs.branchName == 'main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        additionalArguments: '/config mode=ContinuousDelivery /config branches.main.tag= /config branches.main.increment=Patch /config branches.main.is-release-branch=true /config branches.develop.tag=alpha /config branches.develop.increment=Minor /config branches.feature.tag=beta /config branches.feature.increment=None /config branches.hotfix.tag=beta /config branches.hotfix.increment=Patch'

  setup-nuget:
    runs-on: ubuntu-latest
    if: ${{ inputs.requires-github-packages }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup authenticated nuget.config
      run: |
        if [ -f "nuget.config" ]; then
          sed -i "s/YOUR_USERNAME/${{ github.repository_owner }}/g" nuget.config
          sed -i "s/USERNAME_PLACEHOLDER/${{ github.actor }}/g" nuget.config
          sed -i "s/TOKEN_PLACEHOLDER/${{ secrets.GITHUB_TOKEN }}/g" nuget.config
        else
          cat > nuget.config << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <packageSources>
            <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
            <add key="github" value="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" />
          </packageSources>
          <packageSourceCredentials>
            <github>
              <add key="Username" value="${{ github.actor }}" />
              <add key="ClearTextPassword" value="${{ secrets.GITHUB_TOKEN }}" />
            </github>
          </packageSourceCredentials>
        </configuration>
        EOF
        fi

    - name: Upload nuget.config artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}
        path: nuget.config
        retention-days: 1

  build-and-test:
    runs-on: ubuntu-latest
    needs: [version, setup-nuget]
    if: always() && (needs.setup-nuget.result == 'success' || needs.setup-nuget.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download nuget.config
      if: ${{ inputs.requires-github-packages }}
      uses: actions/download-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }} -p:Version=${{ needs.version.outputs.version }}

    - name: Run unit tests
      if: ${{ inputs.run-tests }}
      run: dotnet test --no-build --configuration ${{ inputs.build-configuration }} --verbosity normal --filter "Category!=Integration"

  integration-test:
    runs-on: ubuntu-latest
    needs: setup-nuget
    if: ${{ inputs.run-integration-tests && github.event_name == 'push' }}
    
    services:
      sql-server:
        image: ${{ inputs.database-type == 'mssql' && 'mcr.microsoft.com/mssql/server:2022-latest' || '' }}
        env:
          SA_PASSWORD: 'YourStrong!Passw0rd'
          ACCEPT_EULA: 'Y'
          MSSQL_PID: 'Express'
        ports:
          - 1433:1433
        options: >-
          --name sqlserver
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -C -Q 'SELECT 1'"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=8
          --health-start-period=60s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download nuget.config
      if: ${{ inputs.requires-github-packages }}
      uses: actions/download-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Wait for SQL Server to be ready
      if: ${{ inputs.database-type == 'mssql' }}
      run: |
        echo "Waiting for SQL Server to start..."
        for i in {1..60}; do
          if docker exec sqlserver /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -C -Q "SELECT 1" > /dev/null 2>&1; then
            echo "SQL Server is ready!"
            break
          fi
          echo "Waiting for SQL Server... ($i/60)"
          sleep 3
        done

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }}

    - name: Run integration tests
      run: dotnet test --no-build --configuration ${{ inputs.build-configuration }} --verbosity normal --filter "Category=Integration"
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=ECommerce_${{ inputs.service-name }}_Test;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;Encrypt=false"

  security-scan:
    runs-on: ubuntu-latest
    if: ${{ inputs.run-security-scan }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-docker:
    runs-on: ubuntu-latest
    needs: [version, build-and-test, security-scan]
    if: ${{ inputs.build-docker && github.event_name == 'push' }}
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download nuget.config
      if: ${{ inputs.requires-github-packages }}
      uses: actions/download-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.version.outputs.docker-tag }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-docker
    if: ${{ inputs.deploy-to-dev }}
    environment: development
    
    steps:
    - name: Deploy ${{ inputs.service-name }} to Development
      run: |
        echo "ðŸš€ Deploying ${{ inputs.service-name }} to Development"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}"

  deploy-prod:
    runs-on: ubuntu-latest  
    needs: build-docker
    if: ${{ inputs.deploy-to-prod }}
    environment: production
    
    steps:
    - name: Deploy ${{ inputs.service-name }} to Production
      run: |
        echo "ðŸš€ Deploying ${{ inputs.service-name }} to Production"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
