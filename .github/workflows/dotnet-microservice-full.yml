name: Complete .NET Microservice Pipeline

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      dotnet-version:
        required: false
        type: string
        default: '9.0.x'
      run-tests:
        required: false
        type: boolean
        default: true
      run-integration-tests:
        required: false
        type: boolean
        default: true
      run-security-scan:
        required: false
        type: boolean
        default: true
      build-configuration:
        required: false
        type: string
        default: 'Release'
      database-type:
        required: false
        type: string
        default: 'mssql'
      requires-github-packages:
        required: false
        type: boolean
        default: false
      build-docker:
        required: false
        type: boolean
        default: true
      docker-registry:
        required: false
        type: string
        default: 'ghcr.io'
      deploy-to-dev:
        required: false
        type: boolean
        default: false
      deploy-to-prod:
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ${{ inputs.docker-registry }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  base-pipeline:
    uses: ./.github/workflows/dotnet-base.yml
    with:
      dotnet-version: ${{ inputs.dotnet-version }}
      run-tests: ${{ inputs.run-tests }}
      run-security-scan: ${{ inputs.run-security-scan }}
      build-configuration: ${{ inputs.build-configuration }}
      requires-github-packages: ${{ inputs.requires-github-packages }}
    secrets: inherit

  integration-test:
    runs-on: ubuntu-latest
    needs: base-pipeline
    if: ${{ inputs.run-integration-tests && github.event_name == 'push' }}
    
    services:
      sql-server:
        image: ${{ inputs.database-type == 'mssql' && 'mcr.microsoft.com/mssql/server:2022-latest' || '' }}
        env:
          SA_PASSWORD: 'YourStrong!Passw0rd'
          ACCEPT_EULA: 'Y'
          MSSQL_PID: 'Express'
        ports:
          - 1433:1433
        options: >-
          --name sqlserver
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -C -Q 'SELECT 1'"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=8
          --health-start-period=60s

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download nuget.config
      if: ${{ inputs.requires-github-packages }}
      uses: actions/download-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Wait for SQL Server to be ready
      if: ${{ inputs.database-type == 'mssql' }}
      run: |
        echo "Waiting for SQL Server to start..."
        for i in {1..60}; do
          if docker exec sqlserver /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -C -Q "SELECT 1" > /dev/null 2>&1; then
            echo "SQL Server is ready!"
            break
          fi
          echo "Waiting for SQL Server... ($i/60)"
          sleep 3
        done

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }}

    - name: Run integration tests
      run: dotnet test --no-build --configuration ${{ inputs.build-configuration }} --verbosity normal --filter "Category=Integration"
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=ECommerce_${{ inputs.service-name }}_Test;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;Encrypt=false"

  build-docker:
    runs-on: ubuntu-latest
    needs: base-pipeline
    if: ${{ inputs.build-docker && github.event_name == 'push' }}
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download nuget.config
      if: ${{ inputs.requires-github-packages }}
      uses: actions/download-artifact@v4
      with:
        name: nuget-config-${{ github.run_id }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.version.outputs.docker-tag }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-docker
    if: ${{ inputs.deploy-to-dev }}
    environment: development
    
    steps:
    - name: Deploy ${{ inputs.service-name }} to Development
      run: |
        echo "ðŸš€ Deploying ${{ inputs.service-name }} to Development"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.docker-tag }}"

  deploy-prod:
    runs-on: ubuntu-latest  
    needs: build-docker
    if: ${{ inputs.deploy-to-prod }}
    environment: production
    
    steps:
    - name: Deploy ${{ inputs.service-name }} to Production
      run: |
        echo "ðŸš€ Deploying ${{ inputs.service-name }} to Production"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs: [base-pipeline, build-docker]
    if: ${{ needs.base-pipeline.outputs.is-release == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    
    permissions:
      contents: write

    steps:
    - name: Create GitHub Release and Tag
      run: |
        gh release create v${{ needs.base-pipeline.outputs.version }} \
          --title "Release v${{ needs.base-pipeline.outputs.version }}" \
          --notes "Auto-generated release for ${{ inputs.service-name }}" \
          --generate-notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    